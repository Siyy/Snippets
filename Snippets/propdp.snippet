<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>定义一个依赖属性。</Title>
            <Shortcut>cn_propdp</Shortcut>
            <Description>使用依赖属性作为后端存储的属性的代码片段。</Description>
            <Author>Microsoft Corporation</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
	        <Literal>
	          <ID>type</ID>
	          <ToolTip>属性类型</ToolTip>
	          <Default>int</Default>
	        </Literal>
	        <Literal>
	          <ID>property</ID>
	          <ToolTip>属性名</ToolTip>
	          <Default>MyProperty</Default>
	        </Literal>
	        <Literal>
	          <ID>ownerClass</ID>
	          <ToolTip>此属性的所属类。通常是在其中声明此属性的类。</ToolTip>
	          <Default>ownerclass</Default>
	        </Literal>
	        <Literal>
	          <ID>defaultValue</ID>
	          <ToolTip>此属性的默认值。</ToolTip>
	          <Default>0</Default>
	        </Literal>
	        <Literal>
	          <ID>caption</ID>
	          <ToolTip>说明标签</ToolTip>
	          <Default>我的属性</Default>
	        </Literal>
            </Declarations>
            <Code Language="csharp">
                <![CDATA[
#region $type$ $property$ - $caption$ ： $defaultValue$

/// <summary>
/// $caption$。
/// 默认值为 $defaultValue$ 。
/// </summary>
[
//System.ComponentModel.DisplayName("可以在这里指定显示的标签，但是通常显示代码中使用的属性名更方便。")
//,
System.ComponentModel.Description("$caption$，默认值为 $defaultValue$ 。") 
//,
//System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)
]
public $type$ $property$
{
	get { return ($type$)GetValue($property$Property); }
	set { SetValue($property$Property, value); }
}

/// <summary>
/// 使用 <code>$property$Property</code> 依赖属性作为 <code>$property$</code> 属性的后端存储，这将为 动画、样式、绑定 等提供支持。
/// 并提供默认值 $defaultValue$ 。
/// </summary>
public static readonly DependencyProperty $property$Property =
    DependencyProperty.Register(nameof($property$), typeof($type$), typeof($ownerClass$), new PropertyMetadata($defaultValue$));

#endregion
$end$]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
